apiVersion: v1
kind: ConfigMap
metadata:
  name: database-init
data:
  database.sql: |
    SET ROLE app;
    CREATE TABLE message (
      id SERIAL PRIMARY KEY,
      user_token CHAR(32) NOT NULL,
      content TEXT,
      time BIGINT NOT NULL,
      point INTEGER NOT NULL
    );

    CREATE TABLE reply (
      id SERIAL PRIMARY KEY,
      message_id INTEGER REFERENCES message(id),
      user_token CHAR(32) NOT NULL,
      content TEXT,
      time BIGINT NOT NULL,
      point INTEGER NOT NULL
    );

    INSERT INTO message (user_token, content, time, point) VALUES
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Hello, world!', 1669934501259, 0),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'No cross, no crown.', 1669934503259, 3),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Sometime ever, sometime never.', 1669934507259, 9),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'No fear of words, no fear of years.', 1669934521059, 18),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Don’t let the past steal your present.', 1669934531259, -17),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Better late than never.', 1669934543259, -1),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Be cheerful and hopeful.', 1669934556359, -4),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Life is short and you deserve to be happy.', 1669934567259, 1),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'You can’t be perfect but you can be unique.', 1669934572159, 6),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Travel far enough you meet yourself.', 1669934584059, 8),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'Light tomorrow with today.', 1669934592159, -9),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'A man’s best friends are his ten fingers.', 1669934599259, -31),
    ('CTAVtq4Mbx5rfkQy2lRQ58lNg15snOD7', 'The best way to predict the future is to create it.', 1669934607259, 0);
---
apiVersion: v1
data:
  username: YXBw
  password: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: app-secret
type: kubernetes.io/basic-auth
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: pg-cluster
spec:
  instances: 3
  bootstrap:
    initdb:
      database: app
      owner: app
      secret:
        name: app-secret
      postInitApplicationSQLRefs:
        configMapRefs:
        - name: database-init
          key: database.sql
  storage:
    size: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ui
  name: ui
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ui
  strategy: {}
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - image: ui
        name: ui
        imagePullPolicy: Never
        resources:
          limits:
            cpu: 1
          requests:
            cpu: 250m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api
  name: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  strategy: {}
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - image: api
        name: api
        imagePullPolicy: Never
        resources:
          limits:
            cpu: 1
          requests:
            cpu: 250m
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: password
        - name: PGDATABASE
          value: "app"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sse
  name: sse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sse
  strategy: {}
  template:
    metadata:
      labels:
        app: sse
    spec:
      containers:
      - image: sse
        name: sse
        imagePullPolicy: Never
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mq
  name: mq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mq
  strategy: {}
  template:
    metadata:
      labels:
        app: mq
    spec:
      containers:
      - image: rabbitmq:3-management
        name: rabbitmq
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  name: ui
spec:
  maxReplicas: 10
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ui
  targetCPUUtilizationPercentage: 50
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  name: api
spec:
  maxReplicas: 10
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  targetCPUUtilizationPercentage: 50
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ui
  name: ui
spec:
  ports:
  - port: 7778
    protocol: TCP
    targetPort: 7778
  selector:
    app: ui
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api
  name: api
spec:
  ports:
  - port: 7777
    protocol: TCP
    targetPort: 7777
  selector:
    app: api
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sse
  name: sse
spec:
  ports:
  - port: 7776
    protocol: TCP
    targetPort: 7776
  selector:
    app: sse
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mq
  name: mq
spec:
  ports:
  - port: 5672
    protocol: TCP
    targetPort: 5672
  selector:
    app: mq
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui
                port:
                  number: 7778
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: api
                port:
                  number: 7777
          - path: /sse
            pathType: Prefix
            backend:
              service:
                name: sse
                port:
                  number: 7776
